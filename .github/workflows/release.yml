name: Build/publish release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  create-release:
    if: (startsWith(github.ref_name, 'v') && github.ref_type == 'tag')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/create-gh-release-action@v1
        with:
          title: $version
          token: ${{ secrets.GH_TOKEN }}

  release:
    name: Binary ${{ matrix.target }} (on ${{ matrix.os }})
    continue-on-error: false
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            compress: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            compress: true
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            compress: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            compress: true
          - os: windows-latest
            compress: true
          - os: macos-latest
            target: x86_64-apple-darwin
            compress: true
          - os: macos-latest
            target: aarch64-apple-darwin
            compress: true
          - os: ubuntu-latest
            target: x86_64-unknown-freebsd
            compress: true

    # The type of runner that the job will run on
    # Runs on Ubuntu if other os is not specified above
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    timeout-minutes: 90
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: create version file
        if: (startsWith(github.ref_name, 'v') && github.ref_type == 'tag')
        run: echo "${{github.ref_name}}" | tail -c+2  >> .build_version

      - name: Get version from tag
        id: extract_version
        run: |
          echo "version=${GITHUB_REF_NAME#v}" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly-2024-04-29

      - name: Install musl-tools
        run: sudo apt install musl-tools
        if: startsWith(matrix.os, 'ubuntu')

      - name: Install openssl on ubuntu if needed
        if: startsWith(matrix.os, 'ubuntu')
        run: grep -q 'openssl' 'Cargo.lock' && sudo apt install pkg-config libssl-dev
      - name: Install openssl on macos if needed
        if: startsWith(matrix.os, 'macos')
        run: grep -q 'openssl' 'Cargo.lock' && brew install openssl
      - name: Set Perl environment variables
        if: runner.os == 'Windows'
        run: |
          echo "PERL=$((where.exe perl)[0])" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          echo "OPENSSL_SRC_PERL=$((where.exe perl)[0])" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          # choco install openssl strawberryperl

      - name: Build and Upload
        uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: chnroutes
          target: ${{ matrix.target }}
          tar: unix
          zip: windows
          token: ${{ secrets.GH_TOKEN }}
          features: build-binary
